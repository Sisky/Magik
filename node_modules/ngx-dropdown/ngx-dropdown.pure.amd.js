define("ngx-dropdown/DropdownNotClosableZone", ["require", "exports", "@angular/core"], function (require, exports, core_1) {
    var DropdownNotClosableZone = (function () {
        function DropdownNotClosableZone(elementRef) {
            this.elementRef = elementRef;
        }
        DropdownNotClosableZone.prototype.contains = function (element) {
            if (this.dropdownNotClosabledZone === false)
                return false;
            var thisElement = this.elementRef.nativeElement;
            return thisElement.contains(element);
        };
        return DropdownNotClosableZone;
    }());
    __decorate([
        core_1.Input("dropdown-not-closable-zone"),
        __metadata("design:type", Boolean)
    ], DropdownNotClosableZone.prototype, "dropdownNotClosabledZone", void 0);
    DropdownNotClosableZone = __decorate([
        core_1.Directive({
            selector: "[dropdown-not-closable-zone]"
        }),
        __metadata("design:paramtypes", [core_1.ElementRef])
    ], DropdownNotClosableZone);
    exports.DropdownNotClosableZone = DropdownNotClosableZone;
});
define("ngx-dropdown/Dropdown", ["require", "exports", "@angular/core", "ngx-dropdown/DropdownNotClosableZone"], function (require, exports, core_2, DropdownNotClosableZone_1) {
    var Dropdown = (function () {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        function Dropdown(elementRef) {
            this.elementRef = elementRef;
            // -------------------------------------------------------------------------
            // Inputs / Outputs
            // -------------------------------------------------------------------------
            this.toggleClick = true;
            this.activateOnFocus = false;
            this.onOpen = new core_2.EventEmitter();
            this.onClose = new core_2.EventEmitter();
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        Dropdown.prototype.open = function () {
            var element = this.elementRef.nativeElement;
            element.classList.add("open");
            this.onOpen.emit(undefined);
        };
        Dropdown.prototype.close = function () {
            var element = this.elementRef.nativeElement;
            element.classList.remove("open");
            this.onClose.emit(undefined);
        };
        Dropdown.prototype.isOpened = function () {
            var element = this.elementRef.nativeElement;
            return element.classList.contains("open");
        };
        Dropdown.prototype.isInClosableZone = function (element) {
            if (!this.notClosableZone)
                return false;
            return this.notClosableZone.contains(element);
        };
        return Dropdown;
    }());
    __decorate([
        core_2.Input("dropdownToggle"),
        __metadata("design:type", Object)
    ], Dropdown.prototype, "toggleClick", void 0);
    __decorate([
        core_2.Input("dropdownFocusActivate"),
        __metadata("design:type", Object)
    ], Dropdown.prototype, "activateOnFocus", void 0);
    __decorate([
        core_2.Output(),
        __metadata("design:type", Object)
    ], Dropdown.prototype, "onOpen", void 0);
    __decorate([
        core_2.Output(),
        __metadata("design:type", Object)
    ], Dropdown.prototype, "onClose", void 0);
    __decorate([
        core_2.ContentChild(DropdownNotClosableZone_1.DropdownNotClosableZone),
        __metadata("design:type", DropdownNotClosableZone_1.DropdownNotClosableZone)
    ], Dropdown.prototype, "notClosableZone", void 0);
    Dropdown = __decorate([
        core_2.Directive({
            selector: "[dropdown]",
            exportAs: "dropdown"
        }),
        __metadata("design:paramtypes", [core_2.ElementRef])
    ], Dropdown);
    exports.Dropdown = Dropdown;
});
define("ngx-dropdown/DropdownOpen", ["require", "exports", "@angular/core", "ngx-dropdown/Dropdown"], function (require, exports, core_3, Dropdown_1) {
    var DropdownOpen = (function () {
        // -------------------------------------------------------------------------
        // Constructor
        // -------------------------------------------------------------------------
        function DropdownOpen(dropdown, elementRef) {
            this.dropdown = dropdown;
            this.elementRef = elementRef;
            // -------------------------------------------------------------------------
            // Private Properties
            // -------------------------------------------------------------------------
            /**
             * This hack is needed for dropdown not to open and instantly closed
             */
            this.openedByFocus = false;
            var _this = this;
            this.closeDropdownOnOutsideClick = function closeDropdownOnOutsideClick(event) {
                _this.closeIfInClosableZone(event);
            };
        }
        // -------------------------------------------------------------------------
        // Public Methods
        // -------------------------------------------------------------------------
        DropdownOpen.prototype.toggle = function () {
            if (this.dropdown.isOpened()) {
                this.close();
            }
            else {
                this.open();
            }
        };
        DropdownOpen.prototype.open = function () {
            if (this.dropdown.isOpened())
                return;
            this.dropdown.open();
            document.addEventListener("click", this.closeDropdownOnOutsideClick, true);
        };
        DropdownOpen.prototype.close = function () {
            if (!this.dropdown.isOpened())
                return;
            this.dropdown.close();
            document.removeEventListener("click", this.closeDropdownOnOutsideClick, true);
        };
        DropdownOpen.prototype.openDropdown = function () {
            if (this.dropdown.activateOnFocus && this.openedByFocus) {
                this.openedByFocus = false;
                return;
            }
            if (this.dropdown.isOpened() && this.dropdown.toggleClick) {
                this.close();
            }
            else {
                this.open();
            }
        };
        DropdownOpen.prototype.dropdownKeydown = function (event) {
            if (event.keyCode === 40) {
                this.openDropdown();
            }
        };
        DropdownOpen.prototype.onFocus = function () {
            if (!this.dropdown.activateOnFocus)
                return;
            this.openedByFocus = true;
            this.dropdown.open();
            document.addEventListener("click", this.closeDropdownOnOutsideClick, true);
        };
        DropdownOpen.prototype.onBlur = function (event) {
            if (!this.dropdown.activateOnFocus)
                return;
            if (event.relatedTarget &&
                !this.dropdown.isInClosableZone(event.relatedTarget) &&
                event.relatedTarget !== this.elementRef.nativeElement) {
                this.dropdown.close();
                document.removeEventListener("click", this.closeDropdownOnOutsideClick, true);
            }
        };
        // -------------------------------------------------------------------------
        // Lifecycle Methods
        // -------------------------------------------------------------------------
        DropdownOpen.prototype.ngOnDestroy = function () {
            document.removeEventListener("click", this.closeDropdownOnOutsideClick, true);
        };
        // -------------------------------------------------------------------------
        // Private Methods
        // -------------------------------------------------------------------------
        DropdownOpen.prototype.closeIfInClosableZone = function (event) {
            if (!this.dropdown.isInClosableZone(event.target)
                && event.target !== this.elementRef.nativeElement
                && !this.elementRef.nativeElement.contains(event.target)) {
                this.dropdown.close();
                document.removeEventListener("click", this.closeDropdownOnOutsideClick, true);
            }
        };
        return DropdownOpen;
    }());
    __decorate([
        core_3.HostListener("click"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], DropdownOpen.prototype, "openDropdown", null);
    __decorate([
        core_3.HostListener("keydown", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], DropdownOpen.prototype, "dropdownKeydown", null);
    __decorate([
        core_3.HostListener("focus"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], DropdownOpen.prototype, "onFocus", null);
    __decorate([
        core_3.HostListener("blur", ["$event"]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [FocusEvent]),
        __metadata("design:returntype", void 0)
    ], DropdownOpen.prototype, "onBlur", null);
    DropdownOpen = __decorate([
        core_3.Directive({
            selector: "[dropdown-open]",
            exportAs: "dropdownOpen"
        }),
        __param(0, core_3.Host()),
        __metadata("design:paramtypes", [Dropdown_1.Dropdown,
            core_3.ElementRef])
    ], DropdownOpen);
    exports.DropdownOpen = DropdownOpen;
});
define("ngx-dropdown/index", ["require", "exports", "@angular/core", "@angular/common", "ngx-dropdown/DropdownNotClosableZone", "ngx-dropdown/Dropdown", "ngx-dropdown/DropdownOpen", "ngx-dropdown/DropdownNotClosableZone", "ngx-dropdown/Dropdown", "ngx-dropdown/DropdownOpen"], function (require, exports, core_4, common_1, DropdownNotClosableZone_2, Dropdown_2, DropdownOpen_1, DropdownNotClosableZone_3, Dropdown_3, DropdownOpen_2) {
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    __export(DropdownNotClosableZone_3);
    __export(Dropdown_3);
    __export(DropdownOpen_2);
    var DropdownModule = (function () {
        function DropdownModule() {
        }
        return DropdownModule;
    }());
    DropdownModule = __decorate([
        core_4.NgModule({
            imports: [
                common_1.CommonModule
            ],
            declarations: [
                DropdownNotClosableZone_2.DropdownNotClosableZone,
                Dropdown_2.Dropdown,
                DropdownOpen_1.DropdownOpen,
            ],
            exports: [
                DropdownNotClosableZone_2.DropdownNotClosableZone,
                Dropdown_2.Dropdown,
                DropdownOpen_1.DropdownOpen,
            ]
        })
    ], DropdownModule);
    exports.DropdownModule = DropdownModule;
});
define("ngx-dropdown", ["require", "exports", "ngx-dropdown/index"], function (require, exports, index_1) {
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    __export(index_1);
});
